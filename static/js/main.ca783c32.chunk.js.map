{"version":3,"sources":["assets/img/alexLogo.png","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SiteNavbar","useState","isOpen","setIsOpen","Navbar","color","light","expand","className","NavbarBrand","href","src","logo","alt","aria-hidden","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","to","Home","lazy","Pages","App","Container","fluid","Row","Col","fallback","Spinner","path","component","exact","icon","faHandPeace","Date","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,sC,gTCwC5BC,EAnCI,WAAO,IAAD,EACMC,oBAAU,GADhB,mBAChBC,EADgB,KACRC,EADQ,KAGxB,OACC,kBAACC,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,KAAKC,UAAU,qBACjD,kBAACC,EAAA,EAAD,CAAaC,KAAK,KACjB,yBAAKF,UAAU,eACd,yBAAKA,UAAU,OAAOG,IAAKC,IAAMC,IAAI,GAAGC,cAAY,SACpD,wBAAIN,UAAU,QAAO,4BAAQA,UAAU,gBAAlB,QAArB,oBAGF,kBAACO,EAAA,EAAD,CAAeC,QAAU,kBAAMb,GAAYD,MAC3C,kBAACe,EAAA,EAAD,CAAUf,OAASA,EAASgB,QAAM,GACjC,kBAACC,EAAA,EAAD,CAAKX,UAAU,UAAUU,QAAM,GAC9B,kBAACE,EAAA,EAAD,KACC,kBAAC,cAAD,CAAaC,GAAG,IAAIb,UAAU,YAA9B,SAED,kBAACY,EAAA,EAAD,KACC,kBAAC,cAAD,CAAaC,GAAG,UAAUb,UAAU,YAApC,UAED,kBAACY,EAAA,EAAD,KACC,kBAAC,cAAD,CAAaC,GAAG,cAAcb,UAAU,YAAxC,cAED,kBAACY,EAAA,EAAD,KACC,kBAAC,cAAD,CAAaC,GAAG,WAAWb,UAAU,YAArC,iBAED,kBAACY,EAAA,EAAD,KACC,kBAAC,cAAD,CAAaC,GAAG,YAAYb,UAAU,YAAtC,gBCxBAc,EAAOC,gBAAK,kBAAM,wDAClBC,EAAQD,gBAAK,kBAAM,kCAyCVE,MAvCf,WACE,OACE,kBAAC,WAAD,KACD,yBAAKjB,UAAU,WACd,kBAACkB,EAAA,EAAD,CAAWC,OAAK,EAACnB,UAAU,eAC1B,kBAACoB,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAAC,EAAD,SAKH,kBAAC,WAAD,CAAUC,SAAW,kBAACC,EAAA,EAAD,CAAS1B,MAAM,UAAUG,UAAU,iBACvD,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOwB,KAAK,SAASC,UAAWT,IAChC,kBAAC,IAAD,CAAOQ,KAAK,IAAIE,OAAK,GACpB,kBAACZ,EAAD,UAMJ,kBAACI,EAAA,EAAD,CAAWC,OAAK,EAACnB,UAAU,iDAC1B,kBAACoB,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAACH,EAAA,EAAD,KACC,kBAACE,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,KACC,kBAAC,IAAD,CAAiBM,KAAMC,IAAa5B,UAAU,SAD/C,oCAC0F,IAAI6B,MAAQC,sBC3B1FC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACP,kBAAC,aAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ca783c32.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alexLogo.a70fa03f.png\";","import React, { useState } from 'react';\nimport { Navbar, NavbarBrand, NavbarToggler, Collapse, Nav, NavItem } from 'reactstrap';\nimport { NavHashLink } from 'react-router-hash-link';\nimport logo from '../assets/img/alexLogo.png';\n\nconst SiteNavbar = () => {\n\tconst [ isOpen, setIsOpen ] = useState( false );\n\n\treturn (\n\t\t<Navbar color=\"white\" light expand=\"md\" className=\"align-items-start\">\n\t\t\t<NavbarBrand href=\"/\">\n\t\t\t\t<div className=\"text-center\">\n\t\t\t\t\t<img className=\"logo\" src={logo} alt=\"\" aria-hidden=\"true\" />\n\t\t\t\t\t<h1 className=\"name\"><strong className=\"text-primary\">Alex</strong>is N. Shocklee</h1>\n\t\t\t\t</div>\n\t\t\t</NavbarBrand>\n\t\t\t<NavbarToggler onClick={ () => setIsOpen( !isOpen ) } />\n\t\t\t<Collapse isOpen={ isOpen } navbar>\n\t\t\t\t<Nav className=\"ml-auto\" navbar>\n\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t<NavHashLink to=\"/\" className=\"nav-link\">home</NavHashLink>\n\t\t\t\t\t</NavItem>\n\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t<NavHashLink to=\"/#about\" className=\"nav-link\">about</NavHashLink>\n\t\t\t\t\t</NavItem>\n\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t<NavHashLink to=\"/#portfolio\" className=\"nav-link\">portfolio</NavHashLink>\n\t\t\t\t\t</NavItem>\n\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t<NavHashLink to=\"/#resume\" className=\"nav-link\">résumé</NavHashLink>\n\t\t\t\t\t</NavItem>\n\t\t\t\t\t<NavItem>\n\t\t\t\t\t\t<NavHashLink to=\"/#contact\" className=\"nav-link\">contact</NavHashLink>\n\t\t\t\t\t</NavItem>\n\t\t\t\t</Nav>\n\t\t\t</Collapse>\n\t\t</Navbar>\n\t);\n};\n\nexport default SiteNavbar;","import React, { Suspense, lazy, Fragment } from 'react';\nimport './assets/scss/app.scss';\nimport { Container, Row, Col, Spinner } from 'reactstrap';\nimport { Switch, Route } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHandPeace } from '@fortawesome/free-solid-svg-icons';\nimport SiteNavbar from './components/Navbar';\n\nconst Home = lazy(() => import('./pages/Home'));\nconst Pages = lazy(() => import('./pages/Pages'));\n\nfunction App() {\n  return (\n    <Fragment>\n\t\t\t<div className=\"content\">\n\t\t\t\t<Container fluid className=\"page-border\">\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t<SiteNavbar />\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t</Row>\n\t\t\t\t</Container>\n\n\t\t\t\t<Suspense fallback={ <Spinner color=\"primary\" className=\"page-loader\"/> }>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/pages\" component={Pages} />\n\t\t\t\t\t\t<Route path=\"/\" exact>\n\t\t\t\t\t\t\t<Home />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</Suspense>\n\t\t\t</div>\n\n\t\t\t<Container fluid className=\"bg-primary text-white text-center py-5 footer\">\n\t\t\t\t<Row>\n\t\t\t\t\t<Col>\n\t\t\t\t\t\t<Container>\n\t\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t\t<Col>\n\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faHandPeace} className=\"mr-1\" /> Created by Alexis N. Shocklee, {(new Date()).getFullYear()}\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</Row>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</Container>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}